{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "wYtuKeK0dImp"
   },
   "outputs": [],
   "source": [
    "# ATTENTION: Please do not alter any of the provided code in the exercise. Only add your own code where indicated\n",
    "# ATTENTION: Please do not add or remove any cells in the exercise. The grader will check specific cells based on the cell position.\n",
    "# ATTENTION: Please use the provided epoch values when training.\n",
    "\n",
    "import csv\n",
    "import numpy as np\n",
    "import tensorflow as tf\n",
    "from tensorflow.keras.preprocessing.image import ImageDataGenerator\n",
    "from os import getcwd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "4kxw-_rmcnVu"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(27455, 28, 28)\n",
      "(27455,)\n",
      "(7172, 28, 28)\n",
      "(7172,)\n"
     ]
    }
   ],
   "source": [
    "def get_data(filename):\n",
    "  # You will need to write code that will read the file passed\n",
    "  # into this function. The first line contains the column headers\n",
    "  # so you should ignore it\n",
    "  # Each successive line contians 785 comma separated values between 0 and 255\n",
    "  # The first value is the label\n",
    "  # The rest are the pixel values for that picture\n",
    "  # The function will return 2 np.array types. One with all the labels\n",
    "  # One with all the images\n",
    "  #\n",
    "  # Tips: \n",
    "  # If you read a full line (as 'row') then row[0] has the label\n",
    "  # and row[1:785] has the 784 pixel values\n",
    "  # Take a look at np.array_split to turn the 784 pixels into 28x28\n",
    "  # You are reading in strings, but need the values to be floats\n",
    "  # Check out np.array().astype for a conversion\n",
    "    with open(filename) as training_file:\n",
    "      # Your code starts here\n",
    "        csv_reader = csv.reader(training_file, delimiter=',')\n",
    "        first_line = True\n",
    "        temp_images = []\n",
    "        temp_labels = []\n",
    "        for row in csv_reader:\n",
    "            if first_line:\n",
    "                # print(\"Ignoring first line\")\n",
    "                first_line = False\n",
    "            else:\n",
    "                temp_labels.append(row[0])\n",
    "                image_data = row[1:785]\n",
    "                image_data_as_array = np.array_split(image_data, 28)\n",
    "                temp_images.append(image_data_as_array)\n",
    "        images = np.array(temp_images).astype('float')\n",
    "        labels = np.array(temp_labels).astype('float')\n",
    "      # Your code ends here\n",
    "    return images, labels\n",
    "\n",
    "path_sign_mnist_train = f\"{getcwd()}/../tmp2/sign_mnist_train.csv\"\n",
    "path_sign_mnist_test = f\"{getcwd()}/../tmp2/sign_mnist_test.csv\"\n",
    "training_images, training_labels = get_data(path_sign_mnist_train)\n",
    "testing_images, testing_labels = get_data(path_sign_mnist_test)\n",
    "\n",
    "# Keep these\n",
    "print(training_images.shape)\n",
    "print(training_labels.shape)\n",
    "print(testing_images.shape)\n",
    "print(testing_labels.shape)\n",
    "\n",
    "# Their output should be:\n",
    "# (27455, 28, 28)\n",
    "# (27455,)\n",
    "# (7172, 28, 28)\n",
    "# (7172,)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "awoqRpyZdQkD"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(27455, 28, 28, 1)\n",
      "(7172, 28, 28, 1)\n"
     ]
    }
   ],
   "source": [
    "# In this section you will have to add another dimension to the data\n",
    "# So, for example, if your array is (10000, 28, 28)\n",
    "# You will need to make it (10000, 28, 28, 1)\n",
    "# Hint: np.expand_dims\n",
    "\n",
    "training_images = np.expand_dims(training_images, axis=3)\n",
    "testing_images = np.expand_dims(testing_images, axis=3)\n",
    "\n",
    "# Create an ImageDataGenerator and do Image Augmentation\n",
    "train_datagen = ImageDataGenerator(\n",
    "    rescale=1.0/255,\n",
    "    rotation_range=40,\n",
    "    width_shift_range=0.2,\n",
    "    height_shift_range=0.2,\n",
    "    shear_range=0.2,\n",
    "    zoom_range=0.2,\n",
    "    horizontal_flip=True,\n",
    "    fill_mode='nearest'\n",
    ")\n",
    "\n",
    "validation_datagen = ImageDataGenerator(rescale=1.0/255)\n",
    "    \n",
    "# Keep These\n",
    "print(training_images.shape)\n",
    "print(testing_images.shape)\n",
    "    \n",
    "# Their output should be:\n",
    "# (27455, 28, 28, 1)\n",
    "# (7172, 28, 28, 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "Rmb7S32cgRqS"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/2\n",
      "858/857 [==============================] - 59s 69ms/step - loss: 2.7842 - acc: 0.1577 - val_loss: 1.9967 - val_acc: 0.3433\n",
      "Epoch 2/2\n",
      "858/857 [==============================] - 55s 64ms/step - loss: 2.1013 - acc: 0.3443 - val_loss: 1.3580 - val_acc: 0.5319\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[213.5867716740844, 0.3830173]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Define the model\n",
    "# Use no more than 2 Conv2D and 2 MaxPooling2D\n",
    "model = tf.keras.models.Sequential([\n",
    "    tf.keras.layers.Conv2D(64, (3, 3), activation='relu', input_shape=(28, 28, 1)),\n",
    "    tf.keras.layers.MaxPooling2D(2, 2),\n",
    "    tf.keras.layers.Conv2D(64, (3, 3), activation='relu'),\n",
    "    tf.keras.layers.MaxPooling2D(2, 2),\n",
    "    tf.keras.layers.Flatten(),\n",
    "    tf.keras.layers.Dense(128, activation=tf.nn.relu),\n",
    "    tf.keras.layers.Dense(26, activation=tf.nn.softmax)]\n",
    ")\n",
    "\n",
    "# Compile Model. \n",
    "model.compile(optimizer = 'rmsprop',\n",
    "              loss = 'sparse_categorical_crossentropy',\n",
    "              metrics=['acc'])\n",
    "\n",
    "# Train the Model\n",
    "history = model.fit_generator(train_datagen.flow(training_images, training_labels, batch_size=32),\n",
    "                              steps_per_epoch=len(training_images) / 32,\n",
    "                              epochs=2,\n",
    "                              validation_data=validation_datagen.flow(testing_images, testing_labels, batch_size=32),\n",
    "                              validation_steps=len(testing_images) / 32)\n",
    "\n",
    "model.evaluate(testing_images, testing_labels, verbose=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "_Q3Zpr46dsij"
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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0QOAu+++m+OPP578/HwGDx7M+PHjSU9PP+gzW7duZeDAgdx9993cdNNNTJkyhYkTJx62b3dn3rx5TJs2jTvuuIPp06fzpz/9iWbNmvHCCy/w4YcfkpGREXesDzzwAEcffTRLlixh6dKlZGZmsnLlSv7yl79w8803c9FFF/H999/j7mRnZ5OWlsYrr7xyIOaKklp3itaoAX37wu9/D598AkuXwl13hfduuw06dIDTT4dbboF33gm/AEQkKU455ZQDyRxg6tSpZGRkkJGRwfLly1m2bNlhnznmmGMYMWIEAN27d2f16tWF7vsHP/jBYW1mz57NxRdfDECXLl3o0KFD3LHOnj2bSy+9FIAOHTrQokULPv30U/r06cOdd97J7373O7788kvq1KlD586dmT59OhMnTuSdd96hYcOGcR+nrJJWbbHcmUF6enjcemsYepk2LYy7338/3HMPNG0KY8aE3vs554TevkgqO4KedHmpV6/egecrV67k/vvvZ968eTRq1IhLL7200DnYtWvXPvC8Ro0a5OcXfrvL0UcfXWKbRLjssss466yzyMnJYfjw4UyZMoUBAwawYMECcnNzmThxIiNGjODWW28ttxgKSq0eenFatoTrr4fp02HTJnjmGRgyBP75z5DUmzSB88+Hxx+HLVuSHa1ItbJt2zYaNGjAsccey/r163n11VcTfoy+ffvy3HPPAWHsu7C/AIrSv3//A7Noli9fzvr16zn11FPJy8vj1FNP5cYbb2TUqFEsXryYtWvXUr9+fS677DJ++ctfsmjRooSfS1FSt4denIYN4aKLwmPPHnjzzTDmnp0NL74Yhm4GDAg997FjQQtxiJSrjIwM0tPTadeuHSeddBJ9+/ZN+DF+9rOfcfnll5Oenn7gUdRwyLBhww7UUOnfvz9Tpkzh2muvpVOnTtSqVYvHH3+c2rVr8/TTTzN16lRq1apFixYtmDx5Mu+++y4TJ07kqKOOonbt2jz88MMJP5eiJG1N0R49enilW+Bi/35YuDCW3JcuDdu7dAkXVMeODReAdFFVqpDly5fTvn37ZIeRdPn5+eTn51OnTh1WrlzJ0KFDWblyJTVrVt5+bWHfOzNb6O49Cmtfec8kGY46Cnr2DI+77oKVK0Niz86GO+6A//ovaNMmltz794dSVEITkeTZsWMHQ4YMIT8/H3fnr3/9a6VO5kdCPfR4bdwIL78ceu8zZsDu3XDccTBqVEjuw4ZB/frJjlLkMOqhV12l7aFXn4uiZXXCCXDVVWGmzObNYax99Ohwx+r48eGi6qhR8MgjsGFDsqMVkWootf7eqCj16sF554VHfj7Mnh0bd8/JCWPsZ50VhmbGjYPTTkt2xCJSDaiHXlY1a8KgQWF+b15euAtv0iT47jv4f/8v3MgUnQs/b54qRIpIuVFCTySzMCNm0iRYtAhWr4YHHoDmzeF3v4Mzz4RWrWLz4b//PtkRi0gKUUIvTyedBD/7WSgatnEjPPEE9OkT/h0xItypetFFMHUqVGC9B5GKMnjw4MNuErrvvvu4/vrri/1c/cgEg3Xr1jF+/PhC2wwaNIiSJlbcd9997Nq168DrzMxMvv3223hCL9bkyZO55557yryfRFNCryjHHw+XXgrPPx8uqr78ckjmb74JP/xhSO5Dh8Jf/gJr1iQ7WpGEuOSSS3jmmWcO2vbMM89wySWXxPX5Fi1alKla4aEJPTc3l0aNGh3x/io7JfRkqFMHRo6Ev/8d1q0LhcJ+8YswRHPDDWHhjuhc+I8+giRNLRUpq/Hjx5OTk3NgMYvVq1ezbt06+vfvf2BeeEZGBp06dSI7O/uwz69evZqOHTsCoYTtxRdfTPv27TnvvPP47rvvDrS7/vrrD5TenTRpEhAqJK5bt47BgwczePBgANLS0ti8OVT2vvfee+nYsSMdO3Y8UHp39erVtG/fnp/85Cd06NCBoUOHHnSckhS2z507dzJy5MgD5XSfffZZACZOnEh6ejqdO3c+rEb8kdIsl2SrUSMMw/TpA3ffDR9/HGbLZGXB7beHxymnxG5m6tMnfEbkCFR09dzjjz+eXr168corrzB27FieeeYZLrzwQsyMOnXq8NJLL3HssceyefNmevfuzZgxY4pcS/Ohhx6ibt26LF++nMWLFx9U/vauu+7i+OOPZ9++fQwZMoTFixfzn//5n9x7773MnDmTJk2aHLSvhQsX8uijjzJ37lzcnTPPPJOBAwdy3HHHsXLlSqZOncrf//53LrzwQl544YUDlRaLU9Q+8/LyaNGiBTk5OUAop7tlyxZeeuklPv74Y8wsIcNAoB565WIW6rVPnBjquq9dCw8/HKY9PvBAqC/TvHlsPnwpeg4iyVJw2KXgcIu7c+utt9K5c2fOOecc1q5dy4Zi7uGYNWvWgcTauXNnOnfufOC95557joyMDLp168bSpUtLLLw1e/ZszjvvPOrVq0f9+vX5wQ9+wNtvvw1A27Zt6dq1K1B8id5499mpUydmzJjBr371K95++20aNmxIw4YNqVOnDldffTUvvvgidevWjesYJVEPvTJr0QKuvTY8tm0LM2OyssJNTY8+Gsr9DhsWeu+jRoWVnESKkYzquWPHjuUXv/gFixYtYteuXXTv3h2Ap556ik2bNrFw4UJq1apFWlpaoSVzS7Jq1Sruuece5s+fz3HHHccVV1xxRPuJipbehVB+tzRDLoU5/fTTWbRoEbm5udx+++0MGTKE3/72t8ybN4/XX3+d559/ngcffJA33nijTMcB9dCrjmOPhQsvhKefDjNmXnst9NTnz4crrgh3skbnw69alexoRQ6oX78+gwcP5qqrrjroYujWrVs54YQTqFWrFjNnzuTzzz8vdj8DBgzg6aefBuCjjz5i8eLFQCi9W69ePRo2bMiGDRsOrBQE0KBBA7Zv337Yvvr3709WVha7du1i586dvPTSS/Tv379M51nUPtetW0fdunW59NJLueWWW1i0aBE7duxg69atZGZm8sc//pEPP/ywTMeOUg+9KqpdOyyUfe658Kc/hQqR0XH3X/wiPDp3jo27d+umCpGSVJdccgnnnXfeQTNefvSjHzF69Gg6depEjx49aNeuXbH7uP7667nyyitp37497du3P9DT79KlC926daNdu3a0bt36oNK7EyZMYPjw4bRo0YKZM2ce2J6RkcEVV1xBr169ALjmmmvo1q1b3MMrAHfeeeeBC58Aa9asKXSfr776KrfccgtHHXUUtWrV4qGHHmL79u2MHTuW3bt34+7ce++9cR+3OCUW5zKz1sDjwImAA39z9/sLaTcIuA+oBWx294HF7bfKFeeqKj77LJbc33kn3JnaunVsTdUBA1QhsppRca6qqzyKc+UDv3T3dKA3cIOZHbRyq5k1Av4CjHH3DsAFRxK8JMApp8BNN8GsWfDVVzBlSuihP/JIWGbvhBNi8+EL+VNURKquEhO6u69390WR59uB5UDLQ5r9EHjR3b+ItNuY6EDlCDRtCldeGXrsmzfDSy+FXvr06XDBBaFCZHQ+/FdfJTtaESmjUo2hm1ka0A2Ye8hbpwO1zOxNoAFwv7s/XsjnJwATANq0aVP6aOXI1asX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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot the chart for accuracy and loss on both training and validation\n",
    "%matplotlib inline\n",
    "import matplotlib.pyplot as plt\n",
    "acc = history.history['acc']\n",
    "val_acc = history.history['val_acc']\n",
    "loss = history.history['loss']\n",
    "val_loss = history.history['val_loss']\n",
    "\n",
    "epochs = range(len(acc))\n",
    "\n",
    "plt.plot(epochs, acc, 'r', label='Training accuracy')\n",
    "plt.plot(epochs, val_acc, 'b', label='Validation accuracy')\n",
    "plt.title('Training and validation accuracy')\n",
    "plt.legend()\n",
    "plt.figure()\n",
    "\n",
    "plt.plot(epochs, loss, 'r', label='Training Loss')\n",
    "plt.plot(epochs, val_loss, 'b', label='Validation Loss')\n",
    "plt.title('Training and validation loss')\n",
    "plt.legend()\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Submission Instructions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Now click the 'Submit Assignment' button above."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# When you're done or would like to take a break, please run the two cells below to save your work and close the Notebook. This will free up resources for your fellow learners. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "%%javascript\n",
    "<!-- Save the notebook -->\n",
    "IPython.notebook.save_checkpoint();"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "%%javascript\n",
    "IPython.notebook.session.delete();\n",
    "window.onbeforeunload = null\n",
    "setTimeout(function() { window.close(); }, 1000);"
   ]
  }
 ],
 "metadata": {
  "colab": {
   "name": "Exercise 8 - Question.ipynb",
   "provenance": []
  },
  "coursera": {
   "course_slug": "convolutional-neural-networks-tensorflow",
   "graded_item_id": "8mIh8",
   "launcher_item_id": "gg95t"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
